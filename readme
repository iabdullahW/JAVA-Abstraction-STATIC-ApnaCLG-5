# Java OOP Concepts: Abstraction, Interfaces, and Static Keyword

## Overview

This project demonstrates foundational Object-Oriented Programming (OOP) principles in Java, including:
1. **Abstraction**: Leveraging abstract classes and methods to define a template for subclasses.
2. **Interfaces**: Implementing interfaces to establish a contract that classes must follow, supporting multiple inheritance.
3. **Static Keyword**: Utilizing static fields and methods to define properties and behaviors that are shared across all instances of a class.

Each concept is showcased through code examples, detailed below.

## Concepts and Code Files

### 1. Abstraction

**Abstraction** is a principle where only essential details are exposed to the user, hiding the complexity behind the scenes. Abstract classes provide a blueprint that cannot be instantiated directly; instead, subclasses extend the abstract class and implement its methods.

- **Key Points**:
  - Abstract classes and methods are defined using the `abstract` keyword.
  - Abstract methods have no body (`{}`) and must be implemented by subclasses.

- **Code File**: `Abstraction.java`

- **Example Classes**:
  - `Animal` (abstract class) with an abstract method `walk()` and a concrete method `eat()`.
  - `Horse` and `Chicken` classes that extend `Animal` and provide an implementation for `walk()`.

- **How to Run**:
  Compile and run the example as follows:
  ```bash
  javac Abstraction.java
  java Abstraction
